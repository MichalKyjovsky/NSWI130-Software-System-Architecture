{
  "id" : 1,
  "name" : "Public Data Space",
  "description" : "This workspace documents the architecture of the Public Data Space which enables public institutions in Czechia to share public data among each other in a guaranteed way.",
  "revision" : 0,
  "lastModifiedDate" : "2021-11-10T22:05:45Z",
  "lastModifiedAgent" : "structurizr-web/2544/diagram",
  "properties" : {
    "structurizr.dsl" : ""
  },
  "configuration" : { },
  "model" : {
    "people" : [ {
      "id" : "25",
      "tags" : "Element,Person,Consumer",
      "name" : "Device",
      "description" : "A device that is subject to the HBMS",
      "relationships" : [ {
        "id" : "43",
        "tags" : "Relationship",
        "sourceId" : "25",
        "destinationId" : "1",
        "description" : "Retrieves device information and current status and sends requests"
      }, {
        "id" : "42",
        "tags" : "Relationship",
        "sourceId" : "25",
        "destinationId" : "19",
        "description" : "Retrieves device information and current status and sends requests"
      } ],
      "location" : "Unspecified"
    }, {
      "id" : "24",
      "tags" : "Element,Person,Consumer",
      "name" : "Administrator",
      "description" : "An actor who manages the building maintanance devices and supports.",
      "relationships" : [ {
        "id" : "33",
        "tags" : "Relationship",
        "sourceId" : "24",
        "destinationId" : "2",
        "description" : "Configures the drivers for the cleaning devices and manages accesses"
      }, {
        "id" : "27",
        "tags" : "Relationship",
        "sourceId" : "24",
        "destinationId" : "1",
        "description" : "Configures the drivers for the cleaning devices and manages accesses"
      } ],
      "location" : "Unspecified"
    }, {
      "id" : "23",
      "tags" : "Element,Person,Consumer",
      "name" : "Regular User",
      "description" : "An actor who configures and schedules the cleaning devices or the building components (windows, lights, aircondition).",
      "relationships" : [ {
        "id" : "26",
        "tags" : "Relationship",
        "sourceId" : "23",
        "destinationId" : "1",
        "description" : "Configures the cleaining devices and building systems"
      }, {
        "id" : "32",
        "tags" : "Relationship",
        "sourceId" : "23",
        "destinationId" : "2",
        "description" : "Configures the cleaining devices and building systems"
      } ],
      "location" : "Unspecified"
    } ],
    "softwareSystems" : [ {
      "id" : "20",
      "tags" : "Element,Software System,Existing System",
      "name" : "Database of the hospital employees",
      "description" : "Stores data records about the hospital employees and provides API for Hospital Building Maintanace System.",
      "location" : "Unspecified"
    }, {
      "id" : "22",
      "tags" : "Element,Software System,Existing System",
      "name" : "Index of all hospital's devices drivers",
      "description" : "Actual data storage index where all drivers and firmwares of hospital's devices are stored in the most recent version.",
      "location" : "Unspecified"
    }, {
      "id" : "21",
      "tags" : "Element,Software System,Existing System",
      "name" : "Devices Registry",
      "description" : "Stores and presents the records of all hospital devices.",
      "relationships" : [ {
        "id" : "31",
        "tags" : "Relationship",
        "sourceId" : "21",
        "destinationId" : "22",
        "description" : "Indexes"
      } ],
      "location" : "Unspecified"
    }, {
      "id" : "1",
      "tags" : "Element,Software System",
      "name" : "Hospital Building Maintanance System (HBMS)",
      "description" : "Manages and schedules building maintanance devices accross the hospital sectors.",
      "relationships" : [ {
        "id" : "28",
        "tags" : "Relationship",
        "sourceId" : "1",
        "destinationId" : "20",
        "description" : "Uses hospital employee records from"
      }, {
        "id" : "29",
        "tags" : "Relationship",
        "sourceId" : "1",
        "destinationId" : "21",
        "description" : "Harvests metadata records from"
      }, {
        "id" : "41",
        "tags" : "Relationship",
        "sourceId" : "1",
        "destinationId" : "25",
        "description" : "Retrieves device information and current status and sends requests"
      }, {
        "id" : "30",
        "tags" : "Relationship",
        "sourceId" : "1",
        "destinationId" : "22",
        "description" : "Fetches a newer version of the firmawares and drivers from"
      } ],
      "location" : "Unspecified",
      "containers" : [ {
        "id" : "2",
        "tags" : "Element,Container",
        "name" : "HBMS Web Front-end",
        "description" : "Provides all functionality for all devices schedulling, management and monitoring",
        "relationships" : [ {
          "id" : "44",
          "tags" : "Relationship",
          "sourceId" : "2",
          "destinationId" : "4",
          "description" : "Makes API calls to",
          "technology" : "JSON/HTTPS"
        }, {
          "id" : "34",
          "tags" : "Relationship",
          "sourceId" : "2",
          "destinationId" : "3",
          "description" : "Uses to deliver functionality"
        }, {
          "id" : "45",
          "tags" : "Relationship",
          "sourceId" : "2",
          "destinationId" : "5",
          "description" : "Makes API calls to",
          "technology" : "JSON/HTTPS"
        } ]
      }, {
        "id" : "19",
        "tags" : "Element,Container",
        "name" : "Device Data Manager",
        "description" : "Manages data about devices.",
        "relationships" : [ {
          "id" : "40",
          "tags" : "Relationship",
          "sourceId" : "19",
          "destinationId" : "25",
          "description" : "Retrieves device information and current status and sends requests"
        }, {
          "id" : "39",
          "tags" : "Relationship",
          "sourceId" : "19",
          "destinationId" : "21",
          "description" : "Accesses the devices database"
        } ],
        "technology" : "DeviceDataManager"
      }, {
        "id" : "18",
        "tags" : "Element,Container",
        "name" : "User Data Manager",
        "description" : "Manages data about users.",
        "relationships" : [ {
          "id" : "38",
          "tags" : "Relationship",
          "sourceId" : "18",
          "destinationId" : "20",
          "description" : "Accesses the employees database"
        } ],
        "technology" : "UserDataManager"
      }, {
        "id" : "11",
        "tags" : "Element,Container",
        "name" : "Device Updater",
        "description" : "Worker responsible for the firmware and driver maintanace.",
        "relationships" : [ {
          "id" : "54",
          "tags" : "Relationship",
          "sourceId" : "11",
          "destinationId" : "2",
          "description" : "Expose the functinality to the GUI as well as to the REST-API"
        }, {
          "id" : "56",
          "tags" : "Relationship",
          "sourceId" : "11",
          "destinationId" : "21",
          "description" : "Gets data and updates from"
        }, {
          "id" : "58",
          "tags" : "Relationship",
          "sourceId" : "11",
          "destinationId" : "3",
          "description" : "Gets the category of the devices with relevant metadata"
        }, {
          "id" : "64",
          "tags" : "Relationship",
          "sourceId" : "11",
          "destinationId" : "25",
          "description" : "Installs updates when in the device is in the appropriate state"
        } ],
        "technology" : "Some black box magix Miso did not invented yet.",
        "components" : [ {
          "id" : "16",
          "tags" : "Element,Component",
          "name" : "Update Installation Trigger",
          "description" : "Triggers the events of device update and propagates it to every issued component",
          "relationships" : [ {
            "id" : "66",
            "tags" : "Relationship",
            "sourceId" : "16",
            "destinationId" : "13",
            "description" : "Gets the information about the actual devices state"
          }, {
            "id" : "60",
            "tags" : "Relationship",
            "sourceId" : "16",
            "destinationId" : "12",
            "description" : "Reflects the information about schedulled update to the manager, so its actual for every listenning service"
          }, {
            "id" : "65",
            "tags" : "Relationship",
            "sourceId" : "16",
            "destinationId" : "14",
            "description" : "Initiates the planning with the current information about issued devices"
          } ],
          "size" : 0
        }, {
          "id" : "15",
          "tags" : "Element,Component",
          "name" : "Version Resolver",
          "description" : "Verifies the provided devices map to a current version of a drivers, firmware and software against the Hospital's devices register",
          "relationships" : [ {
            "id" : "55",
            "tags" : "Relationship",
            "sourceId" : "15",
            "destinationId" : "21",
            "description" : "Gets data and updates from"
          } ],
          "size" : 0
        }, {
          "id" : "13",
          "tags" : "Element,Component",
          "name" : "System Status Resolver",
          "description" : "Retrieves the category of the devices that are under the regulat check and decides if update is required.",
          "relationships" : [ {
            "id" : "62",
            "tags" : "Relationship",
            "sourceId" : "13",
            "destinationId" : "15",
            "description" : "Gets the information about the possible updates for the tracked devices"
          }, {
            "id" : "57",
            "tags" : "Relationship",
            "sourceId" : "13",
            "destinationId" : "3",
            "description" : "Gets the category of the devices with relevant metadata"
          } ],
          "size" : 0
        }, {
          "id" : "14",
          "tags" : "Element,Component",
          "name" : "Update Planner",
          "description" : "Schedules the suitable update window for the particular device so the regular service is not afected.",
          "relationships" : [ {
            "id" : "61",
            "tags" : "Relationship",
            "sourceId" : "14",
            "destinationId" : "16",
            "description" : "Posts the schedule for the devices that are in the current update scope"
          } ],
          "size" : 0
        }, {
          "id" : "17",
          "tags" : "Element,Component",
          "name" : "Update Installation Worker",
          "description" : "Based on the resolved versions and categories installs the requested updates to the device",
          "relationships" : [ {
            "id" : "63",
            "tags" : "Relationship",
            "sourceId" : "17",
            "destinationId" : "25",
            "description" : "Installs updates when in the device is in the appropriate state"
          } ],
          "size" : 0
        }, {
          "id" : "12",
          "tags" : "Element,Component",
          "name" : "Update Manager",
          "description" : "Expose the functionality to other component of the system, so they can be accessed via API or manually",
          "relationships" : [ {
            "id" : "67",
            "tags" : "Relationship",
            "sourceId" : "12",
            "destinationId" : "17",
            "description" : "Adds task"
          }, {
            "id" : "59",
            "tags" : "Relationship",
            "sourceId" : "12",
            "destinationId" : "3",
            "description" : "Posts the information about the planned updated with the modified device schedule and state"
          }, {
            "id" : "53",
            "tags" : "Relationship",
            "sourceId" : "12",
            "destinationId" : "2",
            "description" : "Expose the functinality to the GUI as well as to the REST-API"
          } ],
          "size" : 0
        } ]
      }, {
        "id" : "3",
        "tags" : "Element,Container",
        "name" : "(HBMS) Server",
        "description" : "Implements logic for functionality of the regular devices management.",
        "relationships" : [ {
          "id" : "35",
          "tags" : "Relationship",
          "sourceId" : "3",
          "destinationId" : "11",
          "description" : "Uses for fast retrieval of metadata records lists"
        }, {
          "id" : "36",
          "tags" : "Relationship",
          "sourceId" : "3",
          "destinationId" : "18",
          "description" : "Uses to retrieve information about the users including their system roles and permissions."
        }, {
          "id" : "37",
          "tags" : "Relationship",
          "sourceId" : "3",
          "destinationId" : "19",
          "description" : "Uses to retrieve the information about the available devices and their current state."
        } ],
        "components" : [ {
          "id" : "6",
          "tags" : "Element,Component",
          "name" : "Service of the component 3",
          "description" : "Implements and provides business functionality related to searching for metadata records",
          "relationships" : [ {
            "id" : "48",
            "tags" : "Relationship",
            "sourceId" : "7",
            "destinationId" : "8",
            "description" : "Uses to access metadata about distributions"
          }, {
            "id" : "45",
            "tags" : "Relationship",
            "sourceId" : "7",
            "destinationId" : "9",
            "description" : "Uses to access metadata about datasets"
          } ],
          "size" : 0
        }, {
          "id" : "7",
          "tags" : "Element,Component",
          "name" : "Service of the component 4",
          "description" : "Implements and provides business functionality related to viewing details of metadata records",
          "relationships" : [ {
            "id" : "50",
            "tags" : "Relationship",
            "sourceId" : "7",
            "destinationId" : "8",
            "description" : "Uses to access metadata about distributions"
          }, {
            "id" : "49",
            "tags" : "Relationship",
            "sourceId" : "7",
            "destinationId" : "9",
            "description" : "Uses to access metadata about datasets"
          } ],
          "size" : 0
        }, {
          "id" : "10",
          "tags" : "Element,Component",
          "name" : "Service of the component 7",
          "description" : "Provides access to a metadata records index",
          "relationships" : [ {
            "id" : "52",
            "tags" : "Relationship",
            "sourceId" : "10",
            "destinationId" : "11",
            "description" : "Provides access to"
          } ],
          "size" : 0
        }, {
          "id" : "9",
          "tags" : "Element,Component",
          "name" : "Service of the component 6",
          "description" : "Internal model of dataset metadata",
          "relationships" : [ {
            "id" : "51",
            "tags" : "Relationship",
            "sourceId" : "9",
            "destinationId" : "10",
            "description" : "Uses to retrieve list of metadata records with given values of selected properties"
          } ],
          "size" : 0
        }, {
          "id" : "8",
          "tags" : "Element,Component",
          "name" : "Service of the component 5",
          "description" : "Internal model of distribution metadata",
          "size" : 0
        }, {
          "id" : "12",
          "tags" : "Element,Component",
          "name" : "Service of the component 1",
          "description" : "Provides API for getting a list of metadata records according to specified search parameters via a JSON/HTTPS API.",
          "relationships" : [ {
            "id" : "46",
            "tags" : "Relationship",
            "sourceId" : "10",
            "destinationId" : "13",
            "description" : "Provides access to"
          } ],
          "size" : 0
        }, {
          "id" : "5",
          "tags" : "Element,Component",
          "name" : "Service of the component 2",
          "description" : "Provides API for getting a detail of a given metadata record via a JSON/HTTPS API.",
          "relationships" : [ {
            "id" : "47",
            "tags" : "Relationship",
            "sourceId" : "5",
            "destinationId" : "7",
            "description" : "Uses to access detail business functionality"
          } ],
          "size" : 0
        } ]
      } ]
    } ]
  },
  "documentation" : {
    "sections" : [ {
      "elementId" : "1",
      "title" : "Context",
      "order" : 2,
      "format" : "Markdown",
      "content" : "## Context\n\nWe are developing the Building Maintenance for the Hospital. The Hospital is organized into floors and sections (rooms). These rooms are categorized onto:\n- **Rooms for patients** (*out of scope of these requirements*)\n- **Other rooms** - shared rooms, operating rooms, halls, etc. \n\nThe application will be used by the qualified employees which have appropriate rights to use our software. We will be using already implemented database of the Hospital's employees, therefore; all information about the particular employee is already known.\n\n#### Functional Requirements:\n\nThe following section summarizes the *Functional Requirements* of the project in a non-formatted way. Please feel free to extend any additional remarks or observations. \n\n- User-friendly (intuitive) visualization of the hospital, so the employee can easily orientate. (We are not required to develop mockups or wireframes but consider how possible choices of visualization affects the SW Architecture)\nEach room/section has an associated collection of **states** of each of the devices that our application can handle, i.e., *window - opened/closed*, *air-condition - on/off*, etc.\n-  Each floor has associated the cleaning devices that can be scheduled and triggered automatically by our system\n   -  We can expect that there are no barriers on the floor that our application should consider, i.e., stairs \n   -  We can expect that the device is connected to the PAN, has a unique ID, variable API (depends on the constructor of the particular device), and its firmware is somehow intelligent\n   -  We should consider that the APIs of the devices vary and can be changed, replaced or if the new device is acquired, then it is not yet supported\n   -  The cleaning devices can be scheduled to perform tasks and the proper time - even periodically\n   -  Consider the behavior of the devices at the risk situations - battery low/ lack of the internet, etc.\n   -  Addition of new devices or removal of the obsolete ones\n   -  Track the history of the particular devices, i.e., who configured it last time, etc.\n   -  We do not have to consider user-rights system (either consider that this is taken care of out of the box or prepare your system for the right access check)\n   -  Authentication and authorization process (can be dependent on outer services)\n   -  We can expect outer services that could help our purposes yet are out of the scope of this project\n   -  The architecture should be moreover universal for Web/Mobile platforms (This could be tricky since web-servers, reverse-proxies, or monitoring won't be present on the mobile device - depends - to be discussed)\n   -  Consider the physical/manual interaction with the devices simultaneously with the automated one - prepare precedence behavior/fallback strategies\n\n\n#### Non-Functional Requirements\n\nThe following section summarizes our system's *Non-Functional Requirements* that should be considered and reflected in the architecture. Those requirements are mainly targeted to reduce the overall costs, duration of the development, and the entire system's final complexity.\n\n- The system should consider the security constraints\n- The system should be designed efficiently considering the performance\n- The system should be scalable and extensible\n- The system should be designed in a way to support newly acquired devices easily\n- The system should be robust\n\nAll architectonical decisions that consider the points listed above must be documented within the output diagrams.\n\n![](embed:hospitalBuildingMaintananceSystemContextDiagram)"
    }, {
      "elementId" : "1",
      "title" : "Roadmap",
      "order" : 1,
      "format" : "Markdown",
      "content" : "## Roadmap\n\nThis document describes the architecture of the Building Maintenance System for the Hospital.\n\n\n| Team member | Responsibilty scope |\n|-------------|-------------------- |\n| **Michal Kyjovsky** | Device Updater | \n| **Marian Kazimir** | Device/User Data Manager |\n| **Kristina Lhotanova** | HBMS Front-End |\n| **Robert Badronov** | HBMS Server |\n\n\n\n### Release 1.0\n\nGoal of this release period is to provide high-level static decomposition of the Building Maintance System. Provide the scheme on the level 1 and 2 of the C4 Model. Optionally decompose the particular container that are subject to the individual team member.\n\n\n### Release 1.1\n\nThis release aim to finalize the architecture of the system considering the feedback from the supervisor. Based on the finalized architecture prepare the presentation and handover for another team. "
    }, {
      "elementId" : "1",
      "title" : "Decomposition of the Architecture",
      "order" : 4,
      "format" : "Markdown",
      "content" : "## Decomposition of the Architecture\n\nThe following chapter provides a decomposition and description of each container that is subject to our system.\n\n\n![Hospital Building Maintanance Container Diagram](embed:hospitalBuildingMaintananceContainerDiagram)\n\n### HBMS Web Front-End\nThe purpose of this container is to introduce the graphical user interface both for the administrator of the application and the regular user.\n\n\n### HBMS Server\nThe following container represents the core functionality and business logic of our application. Our architecture acts as a controller over the model components (Device Data Manager, User Data Manager). Among other responsibilities and the most important one of the components is the interaction with devices in the hospital.  \n\n\n### Device Data Manager\nTBD\n\n### User Data Manager\nTBD\n\n### Device Updater\nThe last container our system consists of is the ***Device Updater***. The ***Device Updater*** is responsible for the maintenance of the particular device, checking the version of its firmware and software, and the overall status. Furthermore, it provides updates and upgrades for the devices that are connected to the network and are actively deployed to the service.\n\nFirstly we must declare that the responsibility of storing and managing the drivers was let upon to a standalone service which is not part of our system. Assuming that such a component will exist in the hospital's ecosystem was taken because other devices must be registered within a hospital and require regular drivers, firmware, or system maintenance. Therefore, having this assumption, we will be only querying the issued component and reducing our system's overall complexity and data redundancy. \n\n\n![Device Updater Component](embed:deviceUpdater)\n\nThe utilization of the updater will be enabled using the Admin UI. That literally means that the regular user will not have an access to the maintanance of the particular device. \n\n#### Automatic update & upgrade resolution\n\nFirst of all the system must be able to track the current version of the drivers, firmawares and software on each device. This can be done by the decomposition and categorization of the devices. Then in the scheduled intervals can be devices validated against the version of its system dependencies against the **Devices Registry** which stores the information about the most recent drivers, firmware and software required. The component then verifies that the device can be updated based on the versions resolution. When the device is about to be updated, the component then post request to a planner component which plans the regular update window for a device, so it won't affect the service."
    }, {
      "elementId" : "1",
      "title" : "Stakeholders",
      "order" : 3,
      "format" : "Markdown",
      "content" : "## Stakeholders\n\n\n### Initial analysis\n\n- hospital employees working with the devices connected to the system\n  - doctors, maintenance workers, ...\n- hospital owner\n- hospital CEO (head of the hospital)\n- investors (relevant especially for private hospitals)\n- developers\n\n#### Concerns\n\n##### Employees\n\n- intuitive user interface\n- accessibility (the system shouldn't crash in case of a power outage, it should have a backup server)\n- scalability, multi-platform usage (delivered as both web and mobile application, compatible with all widely used operating systems - Windows, Linux, Mac, Android, iOS)\n- safety (regarding user data protection)\n- support service (technical, quick response if an error occurs)\n- backlog (information storage for monitoring of performed operations, including names of the operators, for easier issue tracking)\n- safety handling (the manual control should be preferred over the remote control, system's security policy should prevent unauthorized users from manipulating with the devices)\n\n##### Owner\n\n- reliability, safety\n- reasonable price (for both system's setup and its maintenance, especially the maintenance as it's the long-term cost)\n- scalability (possibility to add new features in the future)\n- external security service\n- modern and well-documented (the employees might not be willing to work with a system that is too complex or obsolete)\n\n##### Developers\n\n- convenient maintenance (the system should be built on modern technologies with solid documentation, support and community)\n\n- well-documented API, code examples for different use cases\n- continuous integration, automatization, tests (unit tests, integration tests)\n- best code practices (readable code, suitable design patterns)\n- code reviews (from other developers, testers)\n- clear specification of new features\n- precisely maintained issue tracker\n\n\n### Actual Reflection\n\n\n#### Regular User\n\nRegular User is meant as an user which directly interacts with the application on the daily bases. Literally, it can be janitor, cleaner, nurse. The use-cases of such user is to interact with the devices that have direct relation to the sector they are placed (lights, window, aircondition) and with devices intended for cleaning (hovers, window-cleaners). In addition user must be able to see the history of the particular device - hence last queries/commads and their invoker. Finally, the user must have an option to contact the support if they face any technical difficulties. \n\n\n#### Administrator\n\nAdministrator is responsible for maintaining access to the particular sectors and to the particular user. If the automatic resolving of the devices upgrades and updates fails, they must be provided with the graphical user interface enabling the manual configuration of the update/upgrade procedures. \n\n#### Device\n\nThe device represents the entity that is contolled with our application. Device interacts with our application to obtain the new drivers, firmware and software. Among other use-cases belongs the continuos state reporting, so the user are acknowledged about the state of the particular device. \n\n##### TODO: Define device states (unify on some level of abstraction)"
    } ]
  },
  "views" : {
    "systemContextViews" : [ {
      "softwareSystemId" : "1",
      "key" : "hospitalBuildingMaintananceSystemContextDiagram",
      "paperSize" : "A3_Portrait",
      "dimensions" : {
        "width" : 2666,
        "height" : 2716
      },
      "enterpriseBoundaryVisible" : true,
      "elements" : [ {
        "id" : "22",
        "x" : 942,
        "y" : 2208
      }, {
        "id" : "1",
        "x" : 533,
        "y" : 908
      }, {
        "id" : "23",
        "x" : 208,
        "y" : 208
      }, {
        "id" : "24",
        "x" : 908,
        "y" : 208
      }, {
        "id" : "25",
        "x" : 558,
        "y" : 1508
      }, {
        "id" : "20",
        "x" : 1258,
        "y" : 1558
      }, {
        "id" : "21",
        "x" : 2008,
        "y" : 1558
      } ],
      "relationships" : [ {
        "id" : "29",
        "vertices" : [ {
          "x" : 1858,
          "y" : 1508
        } ]
      }, {
        "id" : "28"
      }, {
        "id" : "27"
      }, {
        "id" : "37"
      }, {
        "id" : "26"
      }, {
        "id" : "41",
        "vertices" : [ {
          "x" : 608,
          "y" : 1383
        } ]
      }, {
        "id" : "43",
        "vertices" : [ {
          "x" : 908,
          "y" : 1383
        } ]
      }, {
        "id" : "31"
      }, {
        "id" : "30",
        "vertices" : [ {
          "x" : 408,
          "y" : 1508
        }, {
          "x" : 408,
          "y" : 1908
        } ]
      } ]
    } ],
    "containerViews" : [ {
      "softwareSystemId" : "1",
      "key" : "hospitalBuildingMaintananceContainerDiagram",
      "paperSize" : "A3_Portrait",
      "dimensions" : {
        "width" : 2512,
        "height" : 3916
      },
      "externalSoftwareSystemBoundariesVisible" : true,
      "elements" : [ {
        "id" : "11",
        "x" : 997,
        "y" : 1508
      }, {
        "id" : "23",
        "x" : 405,
        "y" : 208
      }, {
        "id" : "2",
        "x" : 730,
        "y" : 908
      }, {
        "id" : "24",
        "x" : 1105,
        "y" : 208
      }, {
        "id" : "3",
        "x" : 905,
        "y" : 2158
      }, {
        "id" : "25",
        "x" : 1655,
        "y" : 2108
      }, {
        "id" : "18",
        "x" : 247,
        "y" : 2808
      }, {
        "id" : "19",
        "x" : 997,
        "y" : 2808
      }, {
        "id" : "20",
        "x" : 247,
        "y" : 3408
      }, {
        "id" : "21",
        "x" : 1638,
        "y" : 3408
      } ],
      "relationships" : [ {
        "id" : "40",
        "vertices" : [ {
          "x" : 1645,
          "y" : 2737
        } ]
      }, {
        "id" : "42",
        "vertices" : [ {
          "x" : 1431,
          "y" : 2528
        } ]
      }, {
        "id" : "54"
      }, {
        "id" : "64"
      }, {
        "id" : "32"
      }, {
        "id" : "37"
      }, {
        "id" : "36",
        "vertices" : [ {
          "x" : 2051,
          "y" : 786
        } ]
      }, {
        "id" : "35",
        "vertices" : [ {
          "x" : 1324,
          "y" : 2004
        } ]
      }, {
        "id" : "34",
        "vertices" : [ {
          "x" : 847,
          "y" : 1508
        }, {
          "x" : 847,
          "y" : 1808
        } ]
      }, {
        "id" : "33"
      }, {
        "id" : "56",
        "vertices" : [ {
          "x" : 2205,
          "y" : 2108
        }, {
          "x" : 2205,
          "y" : 2508
        } ]
      }, {
        "id" : "58",
        "vertices" : [ {
          "x" : 1027,
          "y" : 1961
        } ]
      }, {
        "id" : "38"
      }, {
        "id" : "39"
      } ]
    } ],
    "componentViews" : [ {
      "key" : "deviceUpdater",
      "paperSize" : "A3_Landscape",
      "dimensions" : {
        "width" : 3879,
        "height" : 2258
      },
      "containerId" : "11",
      "externalContainerBoundariesVisible" : true,
      "elements" : [ {
        "id" : "12",
        "x" : 1210,
        "y" : 1575
      }, {
        "id" : "13",
        "x" : 1195,
        "y" : 345
      }, {
        "id" : "2",
        "x" : 345,
        "y" : 1240
      }, {
        "id" : "3",
        "x" : 335,
        "y" : 315
      }, {
        "id" : "14",
        "x" : 2245,
        "y" : 955
      }, {
        "id" : "25",
        "x" : 3140,
        "y" : 1525
      }, {
        "id" : "15",
        "x" : 2270,
        "y" : 350
      }, {
        "id" : "16",
        "x" : 1205,
        "y" : 955
      }, {
        "id" : "17",
        "x" : 2255,
        "y" : 1595
      }, {
        "id" : "21",
        "x" : 3110,
        "y" : 345
      } ],
      "relationships" : [ {
        "id" : "61",
        "vertices" : [ {
          "x" : 1940,
          "y" : 955
        } ]
      }, {
        "id" : "60"
      }, {
        "id" : "63"
      }, {
        "id" : "62"
      }, {
        "id" : "53"
      }, {
        "id" : "65",
        "vertices" : [ {
          "x" : 1940,
          "y" : 1255
        } ]
      }, {
        "id" : "34"
      }, {
        "id" : "55"
      }, {
        "id" : "67"
      }, {
        "id" : "66"
      }, {
        "id" : "57"
      }, {
        "id" : "59"
      } ]
    }, {
      "key" : "serverComponentDiagram",
      "dimensions" : {
        "width" : 3430,
        "height" : 2345
      },
      "containerId" : "3",
      "externalContainerBoundariesVisible" : true,
      "elements" : [ {
        "id" : "11",
        "x" : 2740,
        "y" : 220
      }, {
        "id" : "2",
        "x" : 420,
        "y" : 200
      }, {
        "id" : "13",
        "x" : 2740,
        "y" : 220
      }, {
        "id" : "4",
        "x" : 400,
        "y" : 650
      }, {
        "id" : "5",
        "x" : 400,
        "y" : 1015
      }, {
        "id" : "6",
        "x" : 1155,
        "y" : 650
      }, {
        "id" : "7",
        "x" : 1155,
        "y" : 1015
      }, {
        "id" : "8",
        "x" : 1935,
        "y" : 1370
      }, {
        "id" : "9",
        "x" : 1935,
        "y" : 650
      }, {
        "id" : "10",
        "x" : 2735,
        "y" : 650
      } ],
      "relationships" : [ {
        "id" : "50"
      }, {
        "id" : "51",
        "position" : 50
      }, {
        "id" : "52"
      }, {
        "id" : "54"
      }, {
        "id" : "44"
      }, {
        "id" : "45",
        "vertices" : [ {
          "x" : 300,
          "y" : 355
        }, {
          "x" : 295,
          "y" : 1220
        } ],
        "position" : 25
      }, {
        "id" : "46"
      }, {
        "id" : "47"
      }, {
        "id" : "48"
      }, {
        "id" : "49"
      } ]
    } ],
    "configuration" : {
      "branding" : { },
      "styles" : {
        "elements" : [ {
          "tag" : "Existing System",
          "background" : "#999999",
          "color" : "#ffffff"
        }, {
          "tag" : "Consumer",
          "background" : "#999999",
          "color" : "#ffffff"
        } ]
      },
      "themes" : [ "https://static.structurizr.com/themes/default/theme.json" ],
      "terminology" : { },
      "lastSavedView" : "deviceUpdater"
    }
  }
}